/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    /**
     * Simple User
     */
    "simple-user": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      starred_at?: string;
    } | null;
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    integration: {
      /**
       * Unique identifier of the GitHub app
       */
      id: number;
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      node_id: string;
      owner: components["schemas"]["simple-user"] | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      description: string | null;
      external_url: string;
      html_url: string;
      created_at: string;
      updated_at: string;
      /**
       * The set of permissions for the GitHub app
       */
      permissions: {
        issues?: string;
        checks?: string;
        metadata?: string;
        contents?: string;
        deployments?: string;
        [key: string]: string;
      };
      /**
       * The list of events for the GitHub app
       */
      events: string[];
      /**
       * The number of installations associated with the GitHub app
       */
      installations_count?: number;
      client_id?: string;
      client_secret?: string;
      webhook_secret?: string;
      pem?: string;
      [key: string]: any;
    };
    /**
     * Basic Error
     */
    "basic-error": { message?: string; documentation_url?: string };
    /**
     * Validation Error Simple
     */
    "validation-error-simple": {
      message: string;
      documentation_url: string;
      errors?: string[];
    };
    /**
     * An enterprise account
     */
    enterprise: {
      /**
       * A short description of the enterprise.
       */
      description?: string | null;
      html_url: string;
      /**
       * The enterprise's website URL.
       */
      website_url?: string | null;
      /**
       * Unique identifier of the enterprise
       */
      id: number;
      node_id: string;
      /**
       * The name of the enterprise.
       */
      name: string;
      /**
       * The slug url identifier for the enterprise.
       */
      slug: string;
      created_at: string | null;
      updated_at: string | null;
      avatar_url: string;
    };
    /**
     * Installation
     */
    installation: {
      /**
       * The ID of the installation.
       */
      id: number;
      account:
        | (Partial<components["schemas"]["simple-user"]> &
            Partial<components["schemas"]["enterprise"]>)
        | null;
      /**
       * Describe whether all repositories have been selected or there's a selection involved
       */
      repository_selection: "all" | "selected";
      access_tokens_url: string;
      repositories_url: string;
      html_url: string;
      app_id: number;
      /**
       * The ID of the user or organization this token is being scoped to.
       */
      target_id: number;
      target_type: string;
      permissions: {
        deployments?: string;
        checks?: string;
        metadata?: string;
        contents?: string;
        pull_requests?: string;
        statuses?: string;
        issues?: string;
        organization_administration?: string;
      };
      events: string[];
      created_at: string;
      updated_at: string;
      single_file_name: string | null;
      app_slug: string;
      suspended_by?: components["schemas"]["simple-user"] | null;
      suspended_at?: string | null;
      contact_email?: string | null;
    };
    /**
     * License Simple
     */
    "license-simple": {
      key: string;
      name: string;
      url: string | null;
      spdx_id: string | null;
      node_id: string;
      html_url?: string;
    };
    /**
     * A git repository
     */
    repository: {
      /**
       * Unique identifier of the repository
       */
      id: number;
      node_id: string;
      /**
       * The name of the repository.
       */
      name: string;
      full_name: string;
      license: components["schemas"]["license-simple"] | null;
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"] | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      open_issues_count: number;
      /**
       * Whether this repository acts as a template that can be used to generate new repositories.
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * Whether issues are enabled.
       */
      has_issues: boolean;
      /**
       * Whether projects are enabled.
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * Whether downloads are enabled.
       */
      has_downloads: boolean;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      pushed_at: string | null;
      created_at: string | null;
      updated_at: string | null;
      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;
      template_repository?: {
        id?: number;
        node_id?: string;
        name?: string;
        full_name?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        private?: boolean;
        html_url?: string;
        description?: string;
        fork?: boolean;
        url?: string;
        archive_url?: string;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        deployments_url?: string;
        downloads_url?: string;
        events_url?: string;
        forks_url?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        languages_url?: string;
        merges_url?: string;
        milestones_url?: string;
        notifications_url?: string;
        pulls_url?: string;
        releases_url?: string;
        ssh_url?: string;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        tags_url?: string;
        teams_url?: string;
        trees_url?: string;
        clone_url?: string;
        mirror_url?: string;
        hooks_url?: string;
        svn_url?: string;
        homepage?: string;
        language?: string;
        forks_count?: number;
        stargazers_count?: number;
        watchers_count?: number;
        size?: number;
        default_branch?: string;
        open_issues_count?: number;
        is_template?: boolean;
        topics?: string[];
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        has_pages?: boolean;
        has_downloads?: boolean;
        archived?: boolean;
        disabled?: boolean;
        visibility?: string;
        pushed_at?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: { admin?: boolean; push?: boolean; pull?: boolean };
        allow_rebase_merge?: boolean;
        template_repository?: string;
        temp_clone_token?: string;
        allow_squash_merge?: boolean;
        delete_branch_on_merge?: boolean;
        allow_merge_commit?: boolean;
        subscribers_count?: number;
        network_count?: number;
      } | null;
      temp_clone_token?: string;
      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
      starred_at?: string;
    };
    /**
     * Authentication token for a GitHub App installed on a user or org.
     */
    "installation-token": {
      token?: string;
      expires_at?: string;
      permissions?: {
        issues?: string;
        contents?: string;
        metadata?: string;
        single_file?: string;
      };
      repository_selection?: "all" | "selected";
      repositories?: components["schemas"]["repository"][];
      single_file?: string;
    };
    /**
     * Validation Error
     */
    "validation-error": {
      message: string;
      documentation_url: string;
      errors?: {
        resource?: string;
        field?: string;
        message?: string;
        code: string;
        index?: number;
        value?: string | number | string[];
      }[];
    };
    /**
     * The authorization associated with an OAuth Access.
     */
    "application-grant": {
      id: number;
      url: string;
      app: { client_id: string; name: string; url: string };
      created_at: string;
      updated_at: string;
      scopes: string[];
      user?: components["schemas"]["simple-user"] | null;
    };
    "scoped-installation": {
      permissions: { [key: string]: any };
      /**
       * Describe whether all repositories have been selected or there's a selection involved
       */
      repository_selection: "all" | "selected";
      single_file_name: string | null;
      repositories_url: string;
      account: components["schemas"]["simple-user"];
    };
    /**
     * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
     */
    authorization: {
      id: number;
      url: string;
      /**
       * A list of scopes that this authorization is in.
       */
      scopes: string[] | null;
      token: string;
      token_last_eight: string | null;
      hashed_token: string | null;
      app: { client_id: string; name: string; url: string };
      note: string | null;
      note_url: string | null;
      updated_at: string;
      created_at: string;
      fingerprint: string | null;
      user?: components["schemas"]["simple-user"] | null;
      installation?: components["schemas"]["scoped-installation"] | null;
    };
    /**
     * Code Of Conduct
     */
    "code-of-conduct": {
      key: string;
      name: string;
      url: string;
      body?: string;
      html_url: string | null;
    };
    /**
     * Content Reference attachments allow you to provide context around URLs posted in comments
     */
    "content-reference-attachment": {
      /**
       * The ID of the attachment
       */
      id: number;
      /**
       * The title of the attachment
       */
      title: string;
      /**
       * The body of the attachment
       */
      body: string;
      /**
       * The node_id of the content attachment
       */
      node_id?: string;
    };
    /**
     * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
     */
    "enabled-organizations": "all" | "none" | "selected";
    /**
     * The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
     */
    "allowed-actions": "all" | "local_only" | "selected";
    /**
     * The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.
     */
    "selected-actions-url": string;
    "actions-enterprise-permissions": {
      enabled_organizations?: components["schemas"]["enabled-organizations"];
      /**
       * The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.
       */
      selected_organizations_url?: string;
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    /**
     * Organization Simple
     */
    "organization-simple": {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string | null;
    };
    "selected-actions": {
      /**
       * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
       */
      github_owned_allowed?: boolean;
      /**
       * Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.
       */
      verified_allowed?: boolean;
      /**
       * Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
       */
      patterns_allowed?: string[];
    };
    "runner-groups-enterprise": {
      id?: number;
      name?: string;
      visibility?: string;
      default?: boolean;
      selected_organizations_url?: string;
      runners_url?: string;
    };
    /**
     * A self hosted runner
     */
    runner: {
      /**
       * The id of the runner.
       */
      id: number;
      /**
       * The name of the runner.
       */
      name: string;
      /**
       * The Operating System of the runner.
       */
      os: string;
      /**
       * The status of the runner.
       */
      status: string;
      busy: boolean;
      labels: {
        /**
         * Unique identifier of the label.
         */
        id?: number;
        /**
         * Name of the label.
         */
        name?: string;
        /**
         * The type of label. Read-only labels are applied automatically when the runner is configured.
         */
        type?: "read-only" | "custom";
      }[];
    };
    /**
     * Runner Application
     */
    "runner-application": {
      os?: string;
      architecture?: string;
      download_url?: string;
      filename?: string;
    };
    /**
     * Authentication Token
     */
    "authentication-token": {
      /**
       * The token used for authentication
       */
      token: string;
      /**
       * The time this token expires
       */
      expires_at: string;
      permissions?: { [key: string]: any };
      /**
       * The repositories this token has access to
       */
      repositories?: components["schemas"]["repository"][];
      single_file?: string | null;
      /**
       * Describe whether all repositories have been selected or there's a selection involved
       */
      repository_selection?: "all" | "selected";
    };
    "actions-billing-usage": {
      /**
       * The sum of the free and paid GitHub Actions minutes used.
       */
      total_minutes_used?: number;
      /**
       * The total paid GitHub Actions minutes used.
       */
      total_paid_minutes_used?: number;
      /**
       * The amount of free GitHub Actions minutes available.
       */
      included_minutes?: number;
      minutes_used_breakdown?: {
        /**
         * Total minutes used on Ubuntu runner machines.
         */
        UBUNTU?: number;
        /**
         * Total minutes used on macOS runner machines.
         */
        MACOS?: number;
        /**
         * Total minutes used on Windows runner machines.
         */
        WINDOWS?: number;
      };
    };
    "packages-billing-usage": {
      /**
       * Sum of the free and paid storage space (GB) for GitHuub Packages.
       */
      total_gigabytes_bandwidth_used?: number;
      /**
       * Total paid storage space (GB) for GitHuub Packages.
       */
      total_paid_gigabytes_bandwidth_used?: number;
      /**
       * Free storage space (GB) for GitHub Packages.
       */
      included_gigabytes_bandwidth?: number;
    };
    "combined-billing-usage": {
      /**
       * Numbers of days left in billing cycle.
       */
      days_left_in_billing_cycle?: number;
      /**
       * Estimated storage space (GB) used in billing cycle.
       */
      estimated_paid_storage_for_month?: number;
      /**
       * Estimated sum of free and paid storage space (GB) used in billing cycle.
       */
      estimated_storage_for_month?: number;
    };
    /**
     * Actor
     */
    actor: {
      id: number;
      login: string;
      display_login?: string;
      gravatar_id: string | null;
      url: string;
      avatar_url: string;
    };
    /**
     * A collection of related issues and pull requests.
     */
    milestone: {
      url: string;
      html_url: string;
      labels_url: string;
      id: number;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      /**
       * The state of the milestone.
       */
      state: "open" | "closed";
      /**
       * The title of the milestone.
       */
      title: string;
      description: string | null;
      creator: components["schemas"]["simple-user"] | null;
      open_issues: number;
      closed_issues: number;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      due_on: string | null;
    };
    /**
     * Issue Simple
     */
    "issue-simple": {
      id: number;
      node_id: string;
      url: string;
      repository_url: string;
      labels_url: string;
      comments_url: string;
      events_url: string;
      html_url: string;
      number: number;
      state: string;
      title: string;
      body?: string;
      user: components["schemas"]["simple-user"] | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string;
        default?: boolean;
      }[];
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      milestone: components["schemas"]["milestone"] | null;
      locked: boolean;
      active_lock_reason?: string | null;
      comments: number;
      pull_request?: {
        merged_at?: string | null;
        diff_url: string | null;
        html_url: string | null;
        patch_url: string | null;
        url: string | null;
      };
      closed_at: string | null;
      created_at: string;
      updated_at: string;
      author_association: string;
      body_html?: string;
      body_text?: string;
      timeline_url?: string;
      repository?: components["schemas"]["repository"];
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    "reaction-rollup": {
      url: string;
      total_count: number;
      "+1": number;
      "-1": number;
      laugh: number;
      confused: number;
      heart: number;
      hooray: number;
      eyes: number;
      rocket: number;
    };
    /**
     * Comments provide a way for people to collaborate on an issue.
     */
    "issue-comment": {
      /**
       * Unique identifier of the issue comment
       */
      id: number;
      node_id: string;
      /**
       * URL for the issue comment
       */
      url: string;
      /**
       * Contents of the issue comment
       */
      body?: string;
      body_text?: string;
      body_html?: string;
      html_url: string;
      user: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      issue_url: string;
      author_association: string;
      performed_via_github_app?: components["schemas"]["integration"] | null;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Event
     */
    event: {
      id: string;
      type: string | null;
      actor: components["schemas"]["actor"];
      repo: { id: number; name: string; url: string };
      org?: components["schemas"]["actor"];
      payload: {
        action: string;
        issue?: components["schemas"]["issue-simple"];
        comment?: components["schemas"]["issue-comment"];
        pages?: {
          page_name?: string;
          title?: string;
          summary?: string | null;
          action?: string;
          sha?: string;
          html_url?: string;
        }[];
      };
      public: boolean;
      created_at: string | null;
    };
    /**
     * Hypermedia Link with Type
     */
    "link-with-type": { href: string; type: string };
    /**
     * Feed
     */
    feed: {
      timeline_url: string;
      user_url: string;
      current_user_public_url?: string;
      current_user_url?: string;
      current_user_actor_url?: string;
      current_user_organization_url?: string;
      current_user_organization_urls?: string[];
      security_advisories_url?: string;
      _links: {
        timeline: components["schemas"]["link-with-type"];
        user: components["schemas"]["link-with-type"];
        security_advisories?: components["schemas"]["link-with-type"];
        current_user?: components["schemas"]["link-with-type"];
        current_user_public?: components["schemas"]["link-with-type"];
        current_user_actor?: components["schemas"]["link-with-type"];
        current_user_organization?: components["schemas"]["link-with-type"];
        current_user_organizations?: components["schemas"]["link-with-type"][];
      };
    };
    /**
     * Base Gist
     */
    "base-gist": {
      url: string;
      forks_url: string;
      commits_url: string;
      id: string;
      node_id: string;
      git_pull_url: string;
      git_push_url: string;
      html_url: string;
      files: {
        [key: string]: {
          filename?: string;
          type?: string;
          language?: string;
          raw_url?: string;
          size?: number;
        };
      };
      public: boolean;
      created_at: string;
      updated_at: string;
      description: string | null;
      comments: number;
      user: components["schemas"]["simple-user"] | null;
      comments_url: string;
      owner?: components["schemas"]["simple-user"] | null;
      truncated?: boolean;
      forks?: { [key: string]: any }[];
      history?: { [key: string]: any }[];
    };
    /**
     * Gist Simple
     */
    "gist-simple": {
      url?: string;
      forks_url?: string;
      commits_url?: string;
      id?: string;
      node_id?: string;
      git_pull_url?: string;
      git_push_url?: string;
      html_url?: string;
      files?: {
        [key: string]: {
          filename?: string;
          type?: string;
          language?: string;
          raw_url?: string;
          size?: number;
          truncated?: boolean;
          content?: string;
        };
      };
      public?: boolean;
      created_at?: string;
      updated_at?: string;
      description?: string | null;
      comments?: number;
      user?: string | null;
      comments_url?: string;
      owner?: components["schemas"]["simple-user"];
      truncated?: boolean;
    };
    /**
     * Gist Full
     */
    "gist-full": components["schemas"]["gist-simple"] & {
      forks?: {
        user?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        url?: string;
        id?: string;
        created_at?: string;
        updated_at?: string;
      }[];
      history?: {
        url?: string;
        version?: string;
        user?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        } | null;
        change_status?: {
          deletions?: number;
          additions?: number;
          total?: number;
        };
        committed_at?: string;
      }[];
      fork_of?: components["schemas"]["gist-simple"] | null;
      url?: string;
      forks_url?: string;
      commits_url?: string;
      id?: string;
      node_id?: string;
      git_pull_url?: string;
      git_push_url?: string;
      html_url?: string;
      created_at?: string;
      updated_at?: string;
      description?: string | null;
      comments?: number;
      comments_url?: string;
    };
    /**
     * A comment made to a gist.
     */
    "gist-comment": {
      id: number;
      node_id: string;
      url: string;
      /**
       * The comment text.
       */
      body: string;
      user: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      author_association: string;
    };
    /**
     * Gist Commit
     */
    "gist-commit": {
      url: string;
      version: string;
      user: components["schemas"]["simple-user"] | null;
      change_status: { total?: number; additions?: number; deletions?: number };
      committed_at: string;
    };
    /**
     * Gitignore Template
     */
    "gitignore-template": { name: string; source: string };
    /**
     * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
     */
    issue: {
      id: number;
      node_id: string;
      /**
       * URL for the issue
       */
      url: string;
      repository_url: string;
      labels_url: string;
      comments_url: string;
      events_url: string;
      html_url: string;
      /**
       * Number uniquely identifying the issue within its repository
       */
      number: number;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state: string;
      /**
       * Title of the issue
       */
      title: string;
      /**
       * Contents of the issue
       */
      body?: string;
      user: components["schemas"]["simple-user"] | null;
      /**
       * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
       */
      labels: (
        | string
        | {
            id?: number;
            node_id?: string;
            url?: string;
            name?: string;
            description?: string | null;
            color?: string | null;
            default?: boolean;
          }
      )[];
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      milestone: components["schemas"]["milestone"] | null;
      locked: boolean;
      active_lock_reason?: string | null;
      comments: number;
      pull_request?: {
        merged_at?: string | null;
        diff_url: string | null;
        html_url: string | null;
        patch_url: string | null;
        url: string | null;
      };
      closed_at: string | null;
      created_at: string;
      updated_at: string;
      closed_by?: components["schemas"]["simple-user"] | null;
      body_html?: string;
      body_text?: string;
      timeline_url?: string;
      repository?: components["schemas"]["repository"];
      performed_via_github_app?: components["schemas"]["integration"] | null;
      author_association: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      spdx_id: string | null;
      url: string | null;
      node_id: string;
      html_url: string;
      description: string;
      implementation: string;
      permissions: string[];
      conditions: string[];
      limitations: string[];
      body: string;
      featured: boolean;
    };
    /**
     * Marketplace Listing Plan
     */
    "marketplace-listing-plan": {
      url: string;
      accounts_url: string;
      id: number;
      number: number;
      name: string;
      description: string;
      monthly_price_in_cents: number;
      yearly_price_in_cents: number;
      price_model: string;
      has_free_trial: boolean;
      unit_name: string | null;
      state: string;
      bullets: string[];
    };
    /**
     * Marketplace Purchase
     */
    "marketplace-purchase": {
      url: string;
      type: string;
      id: number;
      login: string;
      organization_billing_email?: string;
      marketplace_pending_change?: {
        is_installed?: boolean;
        effective_date?: string;
        unit_count?: number | null;
        id?: number;
        plan?: components["schemas"]["marketplace-listing-plan"];
      } | null;
      marketplace_purchase: {
        billing_cycle?: string;
        next_billing_date?: string | null;
        is_installed?: boolean;
        unit_count?: number | null;
        on_free_trial?: boolean;
        free_trial_ends_on?: string | null;
        updated_at?: string;
        plan?: components["schemas"]["marketplace-listing-plan"];
      };
    };
    /**
     * Api Overview
     */
    "api-overview": {
      verifiable_password_authentication: boolean;
      ssh_key_fingerprints?: {
        MD5_RSA?: string;
        MD5_DSA?: string;
        SHA256_RSA?: string;
        SHA256_DSA?: string;
      };
      hooks?: string[];
      web?: string[];
      api?: string[];
      git?: string[];
      pages?: string[];
      importer?: string[];
      github_services_sha?: string;
      installed_version?: string;
    };
    /**
     * Minimal Repository
     */
    "minimal-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"] | null;
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url?: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url?: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url?: string;
      mirror_url?: string | null;
      hooks_url: string;
      svn_url?: string;
      homepage?: string | null;
      language?: string | null;
      forks_count?: number;
      stargazers_count?: number;
      watchers_count?: number;
      size?: number;
      default_branch?: string;
      open_issues_count?: number;
      is_template?: boolean;
      topics?: string[];
      has_issues?: boolean;
      has_projects?: boolean;
      has_wiki?: boolean;
      has_pages?: boolean;
      has_downloads?: boolean;
      archived?: boolean;
      disabled?: boolean;
      visibility?: string;
      pushed_at?: string | null;
      created_at?: string | null;
      updated_at?: string | null;
      permissions?: { admin?: boolean; push?: boolean; pull?: boolean };
      template_repository?: string;
      temp_clone_token?: string;
      delete_branch_on_merge?: boolean;
      subscribers_count?: number;
      network_count?: number;
      license?: {
        key?: string;
        name?: string;
        spdx_id?: string;
        url?: string;
        node_id?: string;
      } | null;
      forks?: number;
      open_issues?: number;
      watchers?: number;
    };
    /**
     * Thread
     */
    thread: {
      id?: string;
      repository?: components["schemas"]["minimal-repository"];
      subject?: {
        title?: string;
        url?: string;
        latest_comment_url?: string;
        type?: string;
      };
      reason?: string;
      unread?: boolean;
      updated_at?: string;
      last_read_at?: string | null;
      url?: string;
      subscription_url?: string;
    };
    /**
     * Thread Subscription
     */
    "thread-subscription": {
      subscribed: boolean;
      ignored: boolean;
      reason: string | null;
      created_at: string | null;
      url: string;
      thread_url?: string;
      repository_url?: string;
    };
    /**
     * Organization Full
     */
    "organization-full": {
      login: string;
      id: number;
      node_id: string;
      url: string;
      repos_url: string;
      events_url: string;
      hooks_url: string;
      issues_url: string;
      members_url: string;
      public_members_url: string;
      avatar_url: string;
      description: string | null;
      name?: string;
      company?: string;
      blog?: string;
      location?: string;
      email?: string;
      twitter_username?: string | null;
      is_verified?: boolean;
      has_organization_projects: boolean;
      has_repository_projects: boolean;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      html_url: string;
      created_at: string;
      type: string;
      total_private_repos?: number;
      owned_private_repos?: number;
      private_gists?: number | null;
      disk_usage?: number | null;
      collaborators?: number | null;
      billing_email?: string | null;
      plan?: {
        name: string;
        space: number;
        private_repos: number;
        filled_seats?: number;
        seats?: number;
      };
      default_repository_permission?: string | null;
      members_can_create_repositories?: boolean | null;
      two_factor_requirement_enabled?: boolean | null;
      members_allowed_repository_creation_type?: string;
      members_can_create_public_repositories?: boolean;
      members_can_create_private_repositories?: boolean;
      members_can_create_internal_repositories?: boolean;
      members_can_create_pages?: boolean;
      updated_at: string;
    };
    /**
     * The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
     */
    "enabled-repositories": "all" | "none" | "selected";
    "actions-organization-permissions": {
      enabled_repositories?: components["schemas"]["enabled-repositories"];
      /**
       * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
       */
      selected_repositories_url?: string;
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    "runner-groups-org": {
      id?: number;
      name?: string;
      visibility?: string;
      default?: boolean;
      selected_repositories_url?: string;
      runners_url?: string;
      inherited?: boolean;
    };
    /**
     * Secrets for GitHub Actions for an organization.
     */
    "organization-actions-secret": {
      /**
       * The name of the secret.
       */
      name: string;
      created_at: string;
      updated_at: string;
      /**
       * Visibility of a secret
       */
      visibility: "all" | "private" | "selected";
      selected_repositories_url?: string;
    };
    /**
     * The public key used for setting Actions Secrets.
     */
    "actions-public-key": {
      /**
       * The identifier for the key.
       */
      key_id: string;
      /**
       * The Base64 encoded public key.
       */
      key: string;
      id?: number;
      url?: string;
      title?: string;
      created_at?: string;
    };
    /**
     * Credential Authorization
     */
    "credential-authorization": {
      /**
       * User login that owns the underlying credential.
       */
      login: string;
      /**
       * Unique identifier for the credential.
       */
      credential_id: number;
      /**
       * Human-readable description of the credential type.
       */
      credential_type: string;
      /**
       * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
       */
      token_last_eight?: string;
      /**
       * Date when the credential was authorized for use.
       */
      credential_authorized_at: string;
      /**
       * List of oauth scopes the token has been granted.
       */
      scopes?: string[];
      /**
       * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
       */
      fingerprint?: string;
      /**
       * Date when the credential was last accessed. May be null if it was never accessed
       */
      credential_accessed_at?: string | null;
    };
    /**
     * Org Hook
     */
    "org-hook": {
      id: number;
      url: string;
      ping_url: string;
      name: string;
      events: string[];
      active: boolean;
      config: {
        url?: string;
        insecure_ssl?: string;
        content_type?: string;
        secret?: string;
      };
      updated_at: string;
      created_at: string;
      type: string;
    };
    /**
     * Interaction limit settings.
     */
    "interaction-limit": {
      /**
       * The interaction limit to enable.
       */
      limit: "existing_users" | "contributors_only" | "collaborators_only";
      origin: string;
      expires_at: string;
    };
    /**
     * Organization Invitation
     */
    "organization-invitation": {
      id?: number;
      login?: string | null;
      email?: string | null;
      role?: string;
      created_at?: string;
      inviter?: components["schemas"]["simple-user"];
      team_count?: number;
      invitation_team_url?: string;
      node_id?: string;
      invitation_teams_url?: string;
    };
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    "team-simple": {
      /**
       * Unique identifier of the team
       */
      id: number;
      node_id: string;
      /**
       * URL for the team
       */
      url: string;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      /**
       * Description of the team
       */
      description: string | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      /**
       * The level of privacy this team should have
       */
      privacy?: string;
      html_url: string;
      repositories_url: string;
      slug: string;
      /**
       * Distinguished Name (DN) that team maps to within LDAP environment
       */
      ldap_dn?: string;
    } | null;
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    team: {
      id: number;
      node_id: string;
      name: string;
      slug: string;
      description: string | null;
      privacy?: string;
      permission: string;
      url: string;
      html_url: string;
      members_url: string;
      repositories_url: string;
      parent?: components["schemas"]["team-simple"] | null;
    };
    /**
     * Org Membership
     */
    "org-membership": {
      url: string;
      state: string;
      role: string;
      organization_url: string;
      organization: components["schemas"]["organization-simple"];
      user: components["schemas"]["simple-user"] | null;
      permissions?: { can_create_repository: boolean };
    };
    /**
     * A migration.
     */
    migration: {
      id: number;
      owner: components["schemas"]["simple-user"] | null;
      guid: string;
      state: string;
      lock_repositories: boolean;
      exclude_attachments: boolean;
      repositories: components["schemas"]["repository"][];
      url: string;
      created_at: string;
      updated_at: string;
      node_id: string;
      archive_url?: string;
      exclude?: { [key: string]: any }[];
    };
    /**
     * Projects are a way to organize columns and cards of work.
     */
    project: {
      owner_url: string;
      url: string;
      html_url: string;
      columns_url: string;
      id: number;
      node_id: string;
      /**
       * Name of the project
       */
      name: string;
      /**
       * Body of the project
       */
      body: string | null;
      number: number;
      /**
       * State of the project; either 'open' or 'closed'
       */
      state: string;
      creator: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      /**
       * The baseline permission that all organization members have on this project
       */
      organization_permission?: "read" | "write" | "admin" | "none";
      /**
       * Whether or not this project can be seen by everyone.
       */
      private?: boolean;
      cards_url?: string;
      permissions?: { read: boolean; write: boolean; admin: boolean };
    };
    /**
     * External Groups to be mapped to a team for membership
     */
    "group-mapping": {
      /**
       * Array of groups to be mapped to this team
       */
      groups?: {
        /**
         * The ID of the group
         */
        group_id: string;
        /**
         * The name of the group
         */
        group_name: string;
        /**
         * a description of the group
         */
        group_description: string;
      }[];
      /**
       * The ID of the group
       */
      group_id?: string;
      /**
       * The name of the group
       */
      group_name?: string;
      /**
       * a description of the group
       */
      group_description?: string;
      /**
       * synchronization status for this group mapping
       */
      status?: string;
      /**
       * the time of the last sync for this group-mapping
       */
      synced_at?: string;
    };
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    "team-full": {
      /**
       * Unique identifier of the team
       */
      id: number;
      node_id: string;
      /**
       * URL for the team
       */
      url: string;
      html_url: string;
      /**
       * Name of the team
       */
      name: string;
      slug: string;
      description: string | null;
      /**
       * The level of privacy this team should have
       */
      privacy?: "closed" | "secret";
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      members_url: string;
      repositories_url: string;
      parent?: components["schemas"]["team-simple"] | null;
      members_count: number;
      repos_count: number;
      created_at: string;
      updated_at: string;
      organization: components["schemas"]["organization-full"];
      /**
       * Distinguished Name (DN) that team maps to within LDAP environment
       */
      ldap_dn?: string;
    };
    /**
     * A team discussion is a persistent record of a free-form conversation within a team.
     */
    "team-discussion": {
      author: components["schemas"]["simple-user"] | null;
      /**
       * The main text of the discussion.
       */
      body: string;
      body_html: string;
      /**
       * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
       */
      body_version: string;
      comments_count: number;
      comments_url: string;
      created_at: string;
      last_edited_at: string | null;
      html_url: string;
      node_id: string;
      /**
       * The unique sequence number of a team discussion.
       */
      number: number;
      /**
       * Whether or not this discussion should be pinned for easy retrieval.
       */
      pinned: boolean;
      /**
       * Whether or not this discussion should be restricted to team members and organization administrators.
       */
      private: boolean;
      team_url: string;
      /**
       * The title of the discussion.
       */
      title: string;
      updated_at: string;
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * A reply to a discussion within a team.
     */
    "team-discussion-comment": {
      author: components["schemas"]["simple-user"] | null;
      /**
       * The main text of the comment.
       */
      body: string;
      body_html: string;
      /**
       * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
       */
      body_version: string;
      created_at: string;
      last_edited_at: string | null;
      discussion_url: string;
      html_url: string;
      node_id: string;
      /**
       * The unique sequence number of a team discussion comment.
       */
      number: number;
      updated_at: string;
      url: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
     */
    reaction: {
      id: number;
      node_id: string;
      user: components["schemas"]["simple-user"] | null;
      /**
       * The reaction to use
       */
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      created_at: string;
    };
    /**
     * Team Membership
     */
    "team-membership": {
      url: string;
      /**
       * The role of the user in the team.
       */
      role: "member" | "maintainer";
      state: string;
    };
    /**
     * A team's access to a project.
     */
    "team-project": {
      owner_url?: string;
      url?: string;
      html_url?: string;
      columns_url?: string;
      id?: number;
      node_id?: string;
      name?: string;
      body?: string | null;
      number?: number;
      state?: string;
      creator?: components["schemas"]["simple-user"];
      created_at?: string;
      updated_at?: string;
      organization_permission?: string;
      private?: boolean;
      permissions?: { read?: boolean; write?: boolean; admin?: boolean };
    };
    /**
     * A team's access to a repository.
     */
    "team-repository": {
      /**
       * Unique identifier of the repository
       */
      id: number;
      node_id: string;
      /**
       * The name of the repository.
       */
      name: string;
      full_name: string;
      license: components["schemas"]["license-simple"] | null;
      forks: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        triage?: boolean;
        push: boolean;
        maintain?: boolean;
      };
      owner: components["schemas"]["simple-user"] | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      open_issues_count: number;
      /**
       * Whether this repository acts as a template that can be used to generate new repositories.
       */
      is_template?: boolean;
      topics?: string[];
      /**
       * Whether issues are enabled.
       */
      has_issues: boolean;
      /**
       * Whether projects are enabled.
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       */
      has_wiki: boolean;
      has_pages: boolean;
      /**
       * Whether downloads are enabled.
       */
      has_downloads: boolean;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      pushed_at: string | null;
      created_at: string | null;
      updated_at: string | null;
      /**
       * Whether to allow rebase merges for pull requests.
       */
      allow_rebase_merge?: boolean;
      template_repository?: {
        id?: number;
        node_id?: string;
        name?: string;
        full_name?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          avatar_url?: string;
          gravatar_id?: string;
          url?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          repos_url?: string;
          events_url?: string;
          received_events_url?: string;
          type?: string;
          site_admin?: boolean;
        };
        private?: boolean;
        html_url?: string;
        description?: string;
        fork?: boolean;
        url?: string;
        archive_url?: string;
        assignees_url?: string;
        blobs_url?: string;
        branches_url?: string;
        collaborators_url?: string;
        comments_url?: string;
        commits_url?: string;
        compare_url?: string;
        contents_url?: string;
        contributors_url?: string;
        deployments_url?: string;
        downloads_url?: string;
        events_url?: string;
        forks_url?: string;
        git_commits_url?: string;
        git_refs_url?: string;
        git_tags_url?: string;
        git_url?: string;
        issue_comment_url?: string;
        issue_events_url?: string;
        issues_url?: string;
        keys_url?: string;
        labels_url?: string;
        languages_url?: string;
        merges_url?: string;
        milestones_url?: string;
        notifications_url?: string;
        pulls_url?: string;
        releases_url?: string;
        ssh_url?: string;
        stargazers_url?: string;
        statuses_url?: string;
        subscribers_url?: string;
        subscription_url?: string;
        tags_url?: string;
        teams_url?: string;
        trees_url?: string;
        clone_url?: string;
        mirror_url?: string;
        hooks_url?: string;
        svn_url?: string;
        homepage?: string;
        language?: string;
        forks_count?: number;
        stargazers_count?: number;
        watchers_count?: number;
        size?: number;
        default_branch?: string;
        open_issues_count?: number;
        is_template?: boolean;
        topics?: string[];
        has_issues?: boolean;
        has_projects?: boolean;
        has_wiki?: boolean;
        has_pages?: boolean;
        has_downloads?: boolean;
        archived?: boolean;
        disabled?: boolean;
        visibility?: string;
        pushed_at?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: { admin?: boolean; push?: boolean; pull?: boolean };
        allow_rebase_merge?: boolean;
        template_repository?: string;
        temp_clone_token?: string;
        allow_squash_merge?: boolean;
        delete_branch_on_merge?: boolean;
        allow_merge_commit?: boolean;
        subscribers_count?: number;
        network_count?: number;
      } | null;
      temp_clone_token?: string;
      /**
       * Whether to allow squash merges for pull requests.
       */
      allow_squash_merge?: boolean;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       */
      allow_merge_commit?: boolean;
      subscribers_count?: number;
      network_count?: number;
      open_issues: number;
      watchers: number;
      master_branch?: string;
    };
    /**
     * Project cards represent a scope of work.
     */
    "project-card": {
      url: string;
      /**
       * The project card's ID
       */
      id: number;
      node_id: string;
      note: string | null;
      creator: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      /**
       * Whether or not the card is archived
       */
      archived?: boolean;
      column_url: string;
      content_url?: string;
      project_url: string;
    };
    /**
     * Project columns contain cards of work.
     */
    "project-column": {
      url: string;
      project_url: string;
      cards_url: string;
      /**
       * The unique identifier of the project column
       */
      id: number;
      node_id: string;
      /**
       * Name of the project column
       */
      name: string;
      created_at: string;
      updated_at: string;
    };
    /**
     * Repository Collaborator Permission
     */
    "repository-collaborator-permission": {
      permission: string;
      user: components["schemas"]["simple-user"] | null;
    };
    "rate-limit": { limit: number; remaining: number; reset: number };
    /**
     * Rate Limit Overview
     */
    "rate-limit-overview": {
      resources: {
        core: components["schemas"]["rate-limit"];
        graphql?: components["schemas"]["rate-limit"];
        search: components["schemas"]["rate-limit"];
        source_import?: components["schemas"]["rate-limit"];
        integration_manifest?: components["schemas"]["rate-limit"];
        code_scanning_upload?: components["schemas"]["rate-limit"];
      };
      rate: components["schemas"]["rate-limit"];
    };
    /**
     * Full Repository
     */
    "full-repository": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"] | null;
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      downloads_url: string;
      events_url: string;
      forks_url: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      notifications_url: string;
      pulls_url: string;
      releases_url: string;
      ssh_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      clone_url: string;
      mirror_url: string | null;
      hooks_url: string;
      svn_url: string;
      homepage: string | null;
      language: string | null;
      forks_count: number;
      stargazers_count: number;
      watchers_count: number;
      size: number;
      default_branch: string;
      open_issues_count: number;
      is_template?: boolean;
      topics?: string[];
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      has_downloads: boolean;
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      pushed_at: string;
      created_at: string;
      updated_at: string;
      permissions?: { admin: boolean; pull: boolean; push: boolean };
      allow_rebase_merge?: boolean;
      template_repository?: components["schemas"]["repository"] | null;
      temp_clone_token?: string | null;
      allow_squash_merge?: boolean;
      delete_branch_on_merge?: boolean;
      allow_merge_commit?: boolean;
      subscribers_count: number;
      network_count: number;
      license: components["schemas"]["license-simple"] | null;
      organization?: components["schemas"]["simple-user"] | null;
      parent?: components["schemas"]["repository"];
      source?: components["schemas"]["repository"];
      forks: number;
      master_branch?: string;
      open_issues: number;
      watchers: number;
      /**
       * Whether anonymous git access is allowed.
       */
      anonymous_access_enabled?: boolean;
    };
    /**
     * An artifact
     */
    artifact: {
      id: number;
      node_id: string;
      /**
       * The name of the artifact.
       */
      name: string;
      /**
       * The size in bytes of the artifact.
       */
      size_in_bytes: number;
      url: string;
      archive_download_url: string;
      /**
       * Whether or not the artifact has expired.
       */
      expired: boolean;
      created_at: string | null;
      expires_at: string;
      updated_at: string | null;
    };
    /**
     * Information of a job execution in a workflow run
     */
    job: {
      /**
       * The id of the job.
       */
      id: number;
      /**
       * The id of the associated workflow run.
       */
      run_id: number;
      run_url: string;
      node_id: string;
      /**
       * The SHA of the commit that is being run.
       */
      head_sha: string;
      url: string;
      html_url: string | null;
      /**
       * The phase of the lifecycle that the job is currently in.
       */
      status: "queued" | "in_progress" | "completed";
      /**
       * The outcome of the job.
       */
      conclusion: string | null;
      /**
       * The time that the job started, in ISO 8601 format.
       */
      started_at: string;
      /**
       * The time that the job finished, in ISO 8601 format.
       */
      completed_at: string | null;
      /**
       * The name of the job.
       */
      name: string;
      /**
       * Steps in this job.
       */
      steps?: {
        /**
         * The phase of the lifecycle that the job is currently in.
         */
        status: "queued" | "in_progress" | "completed";
        /**
         * The outcome of the job.
         */
        conclusion: string | null;
        /**
         * The name of the job.
         */
        name: string;
        number: number;
        /**
         * The time that the step started, in ISO 8601 format.
         */
        started_at?: string | null;
        /**
         * The time that the job finished, in ISO 8601 format.
         */
        completed_at?: string | null;
      }[];
      check_run_url: string;
    };
    /**
     * Whether GitHub Actions is enabled on the repository.
     */
    "actions-enabled": boolean;
    "actions-repository-permissions": {
      enabled?: components["schemas"]["actions-enabled"];
      allowed_actions?: components["schemas"]["allowed-actions"];
      selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    "pull-request-minimal": {
      id: number;
      number: number;
      url: string;
      head: {
        ref: string;
        sha: string;
        repo: { id: number; url: string; name: string };
      };
      base: {
        ref: string;
        sha: string;
        repo: { id: number; url: string; name: string };
      };
    };
    /**
     * Simple Commit
     */
    "simple-commit": {
      id: string;
      tree_id: string;
      message: string;
      timestamp: string;
      author: { name: string; email: string } | null;
      committer: { name: string; email: string } | null;
    };
    /**
     * An invocation of a workflow
     */
    "workflow-run": {
      /**
       * The ID of the workflow run.
       */
      id: number;
      node_id: string;
      head_branch: string | null;
      /**
       * The SHA of the head commit that points to the version of the worflow being run.
       */
      head_sha: string;
      /**
       * The auto incrementing run number for the workflow run.
       */
      run_number: number;
      event: string;
      status: string | null;
      conclusion: string | null;
      /**
       * The ID of the parent workflow.
       */
      workflow_id: number;
      /**
       * The URL to the workflow run.
       */
      url: string;
      html_url: string;
      pull_requests: components["schemas"]["pull-request-minimal"][] | null;
      created_at: string | null;
      updated_at: string | null;
      /**
       * The URL to the jobs for the workflow run.
       */
      jobs_url: string;
      /**
       * The URL to download the logs for the workflow run.
       */
      logs_url: string;
      /**
       * The URL to the associated check suite.
       */
      check_suite_url: string;
      /**
       * The URL to the artifacts for the workflow run.
       */
      artifacts_url: string;
      /**
       * The URL to cancel the workflow run.
       */
      cancel_url: string;
      /**
       * The URL to rerun the workflow run.
       */
      rerun_url: string;
      /**
       * The URL to the workflow.
       */
      workflow_url: string;
      head_commit: components["schemas"]["simple-commit"];
      repository: components["schemas"]["minimal-repository"];
      head_repository: components["schemas"]["minimal-repository"];
      head_repository_id?: number;
    };
    /**
     * Workflow Run Usage
     */
    "workflow-run-usage": {
      billable?: {
        UBUNTU?: { total_ms?: number; jobs?: number };
        MACOS?: { total_ms?: number; jobs?: number };
        WINDOWS?: { total_ms?: number; jobs?: number };
      };
      run_duration_ms?: number;
    };
    /**
     * Set secrets for GitHub Actions.
     */
    "actions-secret": {
      /**
       * The name of the secret.
       */
      name: string;
      created_at: string;
      updated_at: string;
    };
    /**
     * A GitHub Actions workflow
     */
    workflow: {
      id: number;
      node_id: string;
      name: string;
      path: string;
      state: "active" | "deleted";
      created_at: string;
      updated_at: string;
      url: string;
      html_url: string;
      badge_url: string;
      deleted_at?: string;
    };
    /**
     * Workflow Usage
     */
    "workflow-usage": {
      billable?: {
        UBUNTU?: { total_ms?: number };
        MACOS?: { total_ms?: number };
        WINDOWS?: { total_ms?: number };
      };
    };
    /**
     * Protected Branch Admin Enforced
     */
    "protected-branch-admin-enforced": { url: string; enabled: boolean };
    /**
     * Protected Branch Pull Request Review
     */
    "protected-branch-pull-request-review": {
      url?: string;
      dismissal_restrictions?: {
        /**
         * The list of users with review dismissal access.
         */
        users?: components["schemas"]["simple-user"][];
        /**
         * The list of teams with review dismissal access.
         */
        teams?: components["schemas"]["team"][];
        url?: string;
        users_url?: string;
        teams_url?: string;
      };
      dismiss_stale_reviews: boolean;
      require_code_owner_reviews: boolean;
      required_approving_review_count?: number;
    };
    /**
     * Branch Restriction Policy
     */
    "branch-restriction-policy": {
      url: string;
      users_url: string;
      teams_url: string;
      apps_url: string;
      users: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      }[];
      teams: {
        id?: number;
        node_id?: string;
        url?: string;
        html_url?: string;
        name?: string;
        slug?: string;
        description?: string | null;
        privacy?: string;
        permission?: string;
        members_url?: string;
        repositories_url?: string;
        parent?: string | null;
      }[];
      apps: {
        id?: number;
        slug?: string;
        node_id?: string;
        owner?: {
          login?: string;
          id?: number;
          node_id?: string;
          url?: string;
          repos_url?: string;
          events_url?: string;
          hooks_url?: string;
          issues_url?: string;
          members_url?: string;
          public_members_url?: string;
          avatar_url?: string;
          description?: string;
          gravatar_id?: string;
          html_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          starred_url?: string;
          subscriptions_url?: string;
          organizations_url?: string;
          received_events_url?: string;
          type?: string;
        };
        name?: string;
        description?: string;
        external_url?: string;
        html_url?: string;
        created_at?: string;
        updated_at?: string;
        permissions?: {
          metadata?: string;
          contents?: string;
          issues?: string;
          single_file?: string;
        };
        events?: string[];
      }[];
    };
    /**
     * Branch Protection
     */
    "branch-protection": {
      url?: string;
      required_status_checks: {
        url?: string;
        enforcement_level: string;
        contexts: string[];
        contexts_url?: string;
      };
      enforce_admins?: components["schemas"]["protected-branch-admin-enforced"];
      required_pull_request_reviews?: components["schemas"]["protected-branch-pull-request-review"];
      restrictions?: components["schemas"]["branch-restriction-policy"];
      required_linear_history?: { enabled?: boolean };
      allow_force_pushes?: { enabled?: boolean };
      allow_deletions?: { enabled?: boolean };
      enabled: boolean;
      name?: string;
      protection_url?: string;
    };
    /**
     * Short Branch
     */
    "short-branch": {
      name: string;
      commit: { sha: string; url: string };
      protected: boolean;
      protection?: components["schemas"]["branch-protection"];
      protection_url?: string;
    };
    /**
     * Metaproperties for Git author/committer information.
     */
    "git-user": { name?: string; email?: string; date?: string };
    verification: {
      verified: boolean;
      reason: string;
      payload: string | null;
      signature: string | null;
    };
    /**
     * Commit
     */
    commit: {
      url: string | null;
      sha: string | null;
      node_id: string;
      html_url: string;
      comments_url: string;
      commit: {
        url: string;
        author: components["schemas"]["git-user"] | null;
        committer: components["schemas"]["git-user"] | null;
        message: string;
        comment_count: number;
        tree: { sha: string; url: string };
        verification?: components["schemas"]["verification"];
      };
      author: components["schemas"]["simple-user"] | null;
      committer: components["schemas"]["simple-user"] | null;
      parents: { sha: string; url: string; html_url?: string }[];
      stats?: { additions?: number; deletions?: number; total?: number };
      files?: {
        filename?: string;
        additions?: number;
        deletions?: number;
        changes?: number;
        status?: string;
        raw_url?: string;
        blob_url?: string;
        patch?: string;
        sha?: string;
        contents_url?: string;
        previous_filename?: string;
      }[];
    };
    /**
     * Branch With Protection
     */
    "branch-with-protection": {
      name: string;
      commit: components["schemas"]["commit"];
      _links: { html: string; self: string };
      protected: boolean;
      protection: components["schemas"]["branch-protection"];
      protection_url: string;
      pattern?: string;
      required_approving_review_count?: number;
    };
    /**
     * Status Check Policy
     */
    "status-check-policy": {
      url: string;
      strict: boolean;
      contexts: string[];
      contexts_url: string;
    };
    /**
     * Branch protections protect branches
     */
    "protected-branch": {
      url: string;
      required_status_checks?: components["schemas"]["status-check-policy"];
      required_pull_request_reviews?: {
        url: string;
        dismiss_stale_reviews?: boolean;
        require_code_owner_reviews?: boolean;
        required_approving_review_count?: number;
        dismissal_restrictions?: {
          url: string;
          users_url: string;
          teams_url: string;
          users: components["schemas"]["simple-user"][];
          teams: components["schemas"]["team"][];
        };
      };
      required_signatures?: { url: string; enabled: boolean };
      enforce_admins?: { url: string; enabled: boolean };
      required_linear_history?: { enabled: boolean };
      allow_force_pushes?: { enabled: boolean };
      allow_deletions?: { enabled: boolean };
      restrictions?: components["schemas"]["branch-restriction-policy"];
    };
    /**
     * A check performed on the code of a given code change
     */
    "check-run": {
      /**
       * The id of the check.
       */
      id: number;
      /**
       * The SHA of the commit that is being checked.
       */
      head_sha: string;
      node_id: string;
      external_id: string | null;
      url: string;
      html_url: string | null;
      details_url: string | null;
      /**
       * The phase of the lifecycle that the check is currently in.
       */
      status: "queued" | "in_progress" | "completed";
      conclusion: string | null;
      started_at: string | null;
      completed_at: string | null;
      output: {
        title: string | null;
        summary: string | null;
        text: string | null;
        annotations_count: number;
        annotations_url: string;
      };
      /**
       * The name of the check.
       */
      name: string;
      check_suite: { id: number } | null;
      app: components["schemas"]["integration"] | null;
      pull_requests: components["schemas"]["pull-request-minimal"][];
    };
    /**
     * Check Annotation
     */
    "check-annotation": {
      path: string;
      start_line: number;
      end_line: number;
      start_column: number | null;
      end_column: number | null;
      annotation_level: string | null;
      title: string | null;
      message: string | null;
      raw_details: string | null;
      blob_href: string;
    };
    /**
     * A suite of checks performed on the code of a given code change
     */
    "check-suite": {
      id: number;
      node_id: string;
      head_branch: string | null;
      /**
       * The SHA of the head commit that is being checked.
       */
      head_sha: string;
      status: string | null;
      conclusion: string | null;
      url: string | null;
      before: string | null;
      after: string | null;
      pull_requests: components["schemas"]["pull-request-minimal"][] | null;
      app: components["schemas"]["integration"] | null;
      repository: components["schemas"]["minimal-repository"];
      created_at: string | null;
      updated_at: string | null;
      head_commit: components["schemas"]["simple-commit"];
      latest_check_runs_count: number;
      check_runs_url: string;
    };
    /**
     * Check suite configuration preferences for a repository.
     */
    "check-suite-preference": {
      preferences?: {
        auto_trigger_checks?: { app_id: number; setting: boolean }[];
      };
      repository?: components["schemas"]["repository"];
    };
    /**
     * State of a code scanning alert.
     */
    "code-scanning-alert-state": "open" | "dismissed" | "fixed";
    /**
     * The full Git reference, formatted as `refs/heads/<branch name>`.
     */
    "code-scanning-alert-ref": string;
    /**
     * The code scanning alert number.
     */
    "code-scanning-alert-number": number;
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    "code-scanning-alert-created-at": string;
    /**
     * The REST API URL of the alert resource.
     */
    "code-scanning-alert-url": string;
    /**
     * The GitHub URL of the alert resource.
     */
    "code-scanning-alert-html-url": string;
    "code-scanning-alert-dismissed-by":
      | (components["schemas"]["simple-user"] | "null")
      | null;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    "code-scanning-alert-dismissed-at": string | null;
    /**
     * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    "code-scanning-alert-dismissed-reason": string | null;
    "code-scanning-alert-rule": {
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id?: string | null;
      /**
       * The severity of the alert.
       */
      severity?: ("none" | "note" | "warning" | "error") | null;
      /**
       * A short description of the rule used to detect the alert.
       */
      description?: string;
    };
    /**
     * The name of the tool used to generate the code scanning analysis alert.
     */
    "code-scanning-analysis-tool-name": string;
    "code-scanning-analysis-tool": {
      name?: components["schemas"]["code-scanning-analysis-tool-name"];
      /**
       * The version of the tool used to detect the alert.
       */
      version?: string | null;
    };
    "code-scanning-alert-code-scanning-alert-items": {
      number?: components["schemas"]["code-scanning-alert-number"];
      created_at?: components["schemas"]["code-scanning-alert-created-at"];
      url?: components["schemas"]["code-scanning-alert-url"];
      html_url?: components["schemas"]["code-scanning-alert-html-url"];
      state?: components["schemas"]["code-scanning-alert-state"];
      dismissed_by?: components["schemas"]["code-scanning-alert-dismissed-by"];
      dismissed_at?: components["schemas"]["code-scanning-alert-dismissed-at"];
      dismissed_reason?: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule?: components["schemas"]["code-scanning-alert-rule"];
      tool?: components["schemas"]["code-scanning-analysis-tool"];
    };
    /**
     * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
     */
    "code-scanning-analysis-analysis-key": string;
    /**
     * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
     */
    "code-scanning-alert-environment": string;
    "code-scanning-alert-instances":
      | {
          ref?: components["schemas"]["code-scanning-alert-ref"];
          analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
          environment?: components["schemas"]["code-scanning-alert-environment"];
          matrix_vars?: string | null;
          state?: components["schemas"]["code-scanning-alert-state"];
        }[]
      | null;
    "code-scanning-alert-code-scanning-alert": {
      number?: components["schemas"]["code-scanning-alert-number"];
      created_at?: components["schemas"]["code-scanning-alert-created-at"];
      url?: components["schemas"]["code-scanning-alert-url"];
      html_url?: components["schemas"]["code-scanning-alert-html-url"];
      instances?: components["schemas"]["code-scanning-alert-instances"];
      state?: components["schemas"]["code-scanning-alert-state"];
      dismissed_by?: components["schemas"]["code-scanning-alert-dismissed-by"];
      dismissed_at?: components["schemas"]["code-scanning-alert-dismissed-at"];
      dismissed_reason?: components["schemas"]["code-scanning-alert-dismissed-reason"];
      rule?: components["schemas"]["code-scanning-alert-rule"];
      tool?: components["schemas"]["code-scanning-analysis-tool"];
    };
    /**
     * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
     */
    "code-scanning-alert-set-state": "open" | "dismissed";
    /**
     * The full Git reference of the code scanning analysis file, formatted as `refs/heads/<branch name>`.
     */
    "code-scanning-analysis-ref": string;
    /**
     * The commit SHA of the code scanning analysis file.
     */
    "code-scanning-analysis-commit-sha": string;
    /**
     * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    "code-scanning-analysis-created-at": string;
    /**
     * Identifies the variable values associated with the environment in which this analysis was performed.
     */
    "code-scanning-analysis-environment": string;
    "code-scanning-analysis-code-scanning-analysis": {
      commit_sha?: components["schemas"]["code-scanning-analysis-commit-sha"];
      ref?: components["schemas"]["code-scanning-analysis-ref"];
      analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
      created_at?: components["schemas"]["code-scanning-analysis-created-at"];
      tool_name?: components["schemas"]["code-scanning-analysis-tool-name"];
      error?: string;
      environment?: components["schemas"]["code-scanning-analysis-environment"];
    };
    /**
     * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string.
     */
    "code-scanning-analysis-sarif-file": string;
    /**
     * Collaborator
     */
    collaborator: {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      permissions?: { pull: boolean; push: boolean; admin: boolean };
    };
    /**
     * Repository invitations let you manage who you collaborate with.
     */
    "repository-invitation": {
      /**
       * Unique identifier of the repository invitation.
       */
      id: number;
      repository: components["schemas"]["minimal-repository"];
      invitee: components["schemas"]["simple-user"] | null;
      inviter: components["schemas"]["simple-user"] | null;
      /**
       * The permission associated with the invitation.
       */
      permissions: "read" | "write" | "admin";
      created_at: string;
      /**
       * URL for the repository invitation
       */
      url: string;
      html_url: string;
      node_id: string;
    };
    /**
     * Commit Comment
     */
    "commit-comment": {
      html_url: string;
      url: string;
      id: number;
      node_id: string;
      body: string;
      path: string | null;
      position: number | null;
      line: number | null;
      commit_id: string;
      user: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      author_association: string;
      reactions?: components["schemas"]["reaction-rollup"];
    };
    /**
     * Scim Error
     */
    "scim-error": {
      message?: string | null;
      documentation_url?: string | null;
      detail?: string | null;
      status?: number;
      scimType?: string | null;
      schemas?: string[];
    };
    /**
     * Branch Short
     */
    "branch-short": {
      name?: string;
      commit?: { sha?: string; url?: string };
      protected?: boolean;
    };
    /**
     * Hypermedia Link
     */
    link: { href: string };
    /**
     * Pull Request Simple
     */
    "pull-request-simple": {
      url: string;
      id: number;
      node_id: string;
      html_url: string;
      diff_url: string;
      patch_url: string;
      issue_url: string;
      commits_url: string;
      review_comments_url: string;
      review_comment_url: string;
      comments_url: string;
      statuses_url: string;
      number: number;
      state: string;
      locked: boolean;
      title: string;
      user: components["schemas"]["simple-user"] | null;
      body: string | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string;
        color?: string;
        default?: boolean;
      }[];
      milestone: components["schemas"]["milestone"] | null;
      active_lock_reason?: string | null;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      merged_at: string | null;
      merge_commit_sha: string | null;
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      requested_reviewers?: components["schemas"]["simple-user"][] | null;
      requested_teams?: components["schemas"]["team-simple"][] | null;
      head: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: components["schemas"]["simple-user"] | null;
      };
      base: {
        label: string;
        ref: string;
        repo: components["schemas"]["repository"];
        sha: string;
        user: components["schemas"]["simple-user"] | null;
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: string;
      /**
       * Indicates whether or not the pull request is a draft.
       */
      draft?: boolean;
    };
    "simple-commit-status": {
      description: string | null;
      id: number;
      node_id: string;
      state: string;
      context: string;
      target_url: string;
      required?: boolean | null;
      avatar_url: string | null;
      url: string;
      created_at: string;
      updated_at: string;
    };
    /**
     * Combined Commit Status
     */
    "combined-commit-status": {
      state: string;
      statuses: components["schemas"]["simple-commit-status"][];
      sha: string;
      total_count: number;
      repository: components["schemas"]["minimal-repository"];
      commit_url: string;
      url: string;
    };
    /**
     * The status of a commit.
     */
    status: {
      url?: string;
      avatar_url?: string | null;
      id?: number;
      node_id?: string;
      state?: string;
      description?: string;
      target_url?: string;
      context?: string;
      created_at?: string;
      updated_at?: string;
      creator?: components["schemas"]["simple-user"];
    };
    /**
     * Code of Conduct Simple
     */
    "code-of-conduct-simple": {
      url: string;
      key: string;
      name: string;
      html_url: string | null;
    };
    "community-health-file": { url: string; html_url: string };
    /**
     * Community Profile
     */
    "community-profile": {
      health_percentage: number;
      description: string | null;
      documentation: string | null;
      files: {
        code_of_conduct: components["schemas"]["code-of-conduct-simple"] | null;
        license: components["schemas"]["license-simple"] | null;
        contributing: components["schemas"]["community-health-file"] | null;
        readme: components["schemas"]["community-health-file"] | null;
        issue_template: components["schemas"]["community-health-file"] | null;
        pull_request_template:
          | components["schemas"]["community-health-file"]
          | null;
      };
      updated_at: string | null;
    };
    /**
     * Diff Entry
     */
    "diff-entry": {
      sha: string;
      filename: string;
      status: string;
      additions: number;
      deletions: number;
      changes: number;
      blob_url: string;
      raw_url: string;
      contents_url: string;
      patch?: string;
      previous_filename?: string;
    };
    /**
     * Commit Comparison
     */
    "commit-comparison": {
      url: string;
      html_url: string;
      permalink_url: string;
      diff_url: string;
      patch_url: string;
      base_commit: components["schemas"]["commit"];
      merge_base_commit: components["schemas"]["commit"];
      status: "diverged" | "ahead" | "behind" | "identical";
      ahead_by: number;
      behind_by: number;
      total_commits: number;
      commits: components["schemas"]["commit"][];
      files: components["schemas"]["diff-entry"][];
    };
    /**
     * Content Tree
     */
    "content-tree": {
      type: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      entries?: {
        type: string;
        size: number;
        name: string;
        path: string;
        content?: string;
        sha: string;
        url: string;
        git_url: string | null;
        html_url: string | null;
        download_url: string | null;
        _links: { git: string | null; html: string | null; self: string };
      }[];
      _links: { git: string | null; html: string | null; self: string };
    };
    /**
     * A list of directory items
     */
    "content-directory": {
      type: string;
      size: number;
      name: string;
      path: string;
      content?: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
    }[];
    /**
     * Content File
     */
    "content-file": {
      type: string;
      encoding: string;
      size: number;
      name: string;
      path: string;
      content: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
      target?: string;
      submodule_git_url?: string;
    };
    /**
     * An object describing a symlink
     */
    "content-symlink": {
      type: string;
      target: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
    };
    /**
     * An object describing a symlink
     */
    "content-submodule": {
      type: string;
      submodule_git_url: string;
      size: number;
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string | null;
      html_url: string | null;
      download_url: string | null;
      _links: { git: string | null; html: string | null; self: string };
    };
    /**
     * File Commit
     */
    "file-commit": {
      content?: {
        name?: string;
        path?: string;
        sha?: string;
        size?: number;
        url?: string;
        html_url?: string;
        git_url?: string;
        download_url?: string;
        type?: string;
        _links?: { self?: string; git?: string; html?: string };
      } | null;
      commit?: {
        sha?: string;
        node_id?: string;
        url?: string;
        html_url?: string;
        author?: { date?: string; name?: string; email?: string };
        committer?: { date?: string; name?: string; email?: string };
        message?: string;
        tree?: { url?: string; sha?: string };
        parents?: { url?: string; html_url?: string; sha?: string }[];
        verification?: {
          verified?: boolean;
          reason?: string;
          signature?: string | null;
          payload?: string | null;
        };
      };
    };
    /**
     * Contributor
     */
    contributor: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string | null;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type: string;
      site_admin?: boolean;
      contributions: number;
      email?: string;
      name?: string;
    };
    /**
     * A request for a specific ref(branch,sha,tag) to be deployed
     */
    deployment: {
      url: string;
      /**
       * Unique identifier of the deployment
       */
      id: number;
      node_id: string;
      sha: string;
      /**
       * The ref to deploy. This can be a branch, tag, or sha.
       */
      ref: string;
      /**
       * Parameter to specify a task to execute
       */
      task: string;
      payload: { [key: string]: any };
      original_environment?: string;
      /**
       * Name for the target deployment environment.
       */
      environment: string;
      description: string | null;
      creator: components["schemas"]["simple-user"] | null;
      created_at: string;
      updated_at: string;
      statuses_url: string;
      repository_url: string;
      /**
       * Specifies if the given environment is will no longer exist at some point in hte future. Default: false.
       */
      transient_environment?: boolean;
      /**
       * Specifies if the given environment is one that end-users directly interact with. Default: false.
       */
      production_environment?: boolean;
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    /**
     * The status of a deployment.
     */
    "deployment-status": {
      url: string;
      id: number;
      node_id: string;
      /**
       * The state of the status.
       */
      state:
        | "error"
        | "failure"
        | "inactive"
        | "pending"
        | "success"
        | "queued"
        | "in_progress";
      creator: components["schemas"]["simple-user"] | null;
      /**
       * A short description of the status.
       */
      description: string;
      /**
       * The environment of the deployment that the status is for.
       */
      environment?: string;
      /**
       * Deprecated: the URL to associate with this status.
       */
      target_url: string;
      created_at: string;
      updated_at: string;
      deployment_url: string;
      repository_url: string;
      /**
       * The URL for accessing your environment.
       */
      environment_url?: string;
      /**
       * The URL to associate with this status.
       */
      log_url?: string;
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    /**
     * Short Blob
     */
    "short-blob": { url?: string; sha?: string };
    /**
     * Blob
     */
    blob: {
      content: string;
      encoding: string;
      url: string;
      sha: string;
      size: number | null;
      node_id: string;
      highlighted_content?: string;
    };
    /**
     * Low-level Git commit operations within a repository
     */
    "git-commit": {
      /**
       * SHA for the commit
       */
      sha?: string;
      node_id?: string;
      url?: string;
      /**
       * Identifying information for the git-user
       */
      author?: {
        /**
         * Timestamp of the commit
         */
        date?: string;
        /**
         * Git email address of the user
         */
        email: string;
        /**
         * Name of the git user
         */
        name: string;
      };
      /**
       * Identifying information for the git-user
       */
      committer?: {
        /**
         * Timestamp of the commit
         */
        date?: string;
        /**
         * Git email address of the user
         */
        email: string;
        /**
         * Name of the git user
         */
        name: string;
      };
      /**
       * Message describing the purpose of the commit
       */
      message?: string;
      tree?: {
        /**
         * SHA for the commit
         */
        sha?: string;
        url?: string;
      };
      parents?: {
        /**
         * SHA for the commit
         */
        sha?: string;
        url?: string;
        html_url?: string;
      }[];
      verification?: {
        verified?: boolean;
        reason?: string;
        signature?: string | null;
        payload?: string | null;
      };
      html_url?: string;
    };
    /**
     * Git references within a repository
     */
    "git-ref": {
      ref?: string;
      node_id?: string;
      url?: string;
      object?: {
        type?: string;
        /**
         * SHA for the reference
         */
        sha?: string;
        url?: string;
      };
    };
    /**
     * Metadata for a Git tag
     */
    "git-tag": {
      node_id: string;
      /**
       * Name of the tag
       */
      tag: string;
      sha: string;
      /**
       * URL for the tag
       */
      url: string;
      /**
       * Message describing the purpose of the tag
       */
      message: string;
      tagger: { date: string; email: string; name: string };
      object: { sha: string; type: string; url: string };
      verification?: components["schemas"]["verification"];
    };
    /**
     * The hierarchy between files in a Git repository.
     */
    "git-tree": {
      sha: string;
      url: string;
      truncated: boolean;
      /**
       * Objects specifying a tree structure
       */
      tree: {
        path?: string;
        mode?: string;
        type?: string;
        sha?: string;
        size?: number;
        url?: string;
      }[];
    };
    "hook-response": {
      code: number | null;
      status: string | null;
      message: string | null;
    };
    /**
     * Webhooks for repositories.
     */
    hook: {
      type: string;
      /**
       * Unique identifier of the webhook.
       */
      id: number;
      /**
       * The name of a valid service, use 'web' for a webhook.
       */
      name: string;
      /**
       * Determines whether the hook is actually triggered on pushes.
       */
      active: boolean;
      /**
       * Determines what events the hook is triggered for. Default: ['push'].
       */
      events: string[];
      config: {
        email?: string;
        password?: string;
        room?: string;
        subdomain?: string;
        url?: string;
        insecure_ssl?: string;
        content_type?: string;
        digest?: string;
        secret?: string;
        token?: string;
      };
      updated_at: string;
      created_at: string;
      url: string;
      test_url: string;
      ping_url: string;
      last_response: components["schemas"]["hook-response"];
    };
    /**
     * A repository import from an external source.
     */
    import: {
      vcs: string | null;
      use_lfs?: string;
      /**
       * The URL of the originating repository.
       */
      vcs_url: string;
      svc_root?: string;
      tfvc_project?: string;
      status:
        | "auth"
        | "error"
        | "none"
        | "detecting"
        | "choose"
        | "auth_failed"
        | "importing"
        | "mapping"
        | "waiting_to_push"
        | "pushing"
        | "complete"
        | "setup"
        | "unknown"
        | "detection_found_multiple"
        | "detection_found_nothing"
        | "detection_needs_auth";
      status_text?: string | null;
      failed_step?: string | null;
      error_message?: string | null;
      import_percent?: number | null;
      commit_count?: number | null;
      push_percent?: number | null;
      has_large_files?: boolean;
      large_files_size?: number;
      large_files_count?: number;
      project_choices?: {
        vcs?: string;
        tfvc_project?: string;
        human_name?: string;
      }[];
      message?: string;
      authors_count?: number | null;
      url: string;
      html_url: string;
      authors_url: string;
      repository_url: string;
      svn_root?: string;
    };
    /**
     * Porter Author
     */
    "porter-author": {
      id: number;
      remote_id: string;
      remote_name: string;
      email: string;
      name: string;
      url: string;
      import_url: string;
    };
    /**
     * Porter Large File
     */
    "porter-large-file": {
      ref_name: string;
      path: string;
      oid: string;
      size: number;
    };
    /**
     * Issue Event Label
     */
    "issue-event-label": { name: string | null; color: string | null };
    "issue-event-dismissed-review": {
      state: string;
      review_id: number;
      dismissal_message: string | null;
      dismissal_commit_id?: string | null;
    };
    /**
     * Issue Event Milestone
     */
    "issue-event-milestone": { title: string };
    /**
     * Issue Event Project Card
     */
    "issue-event-project-card": {
      url: string;
      id: number;
      project_url: string;
      project_id: number;
      column_name: string;
      previous_column_name?: string;
    };
    /**
     * Issue Event Rename
     */
    "issue-event-rename": { from: string; to: string };
    /**
     * Issue Event
     */
    "issue-event": {
      id: number;
      node_id: string;
      url: string;
      actor: components["schemas"]["simple-user"] | null;
      event: string;
      commit_id: string | null;
      commit_url: string | null;
      created_at: string;
      issue?: components["schemas"]["issue-simple"];
      label?: components["schemas"]["issue-event-label"];
      assignee?: components["schemas"]["simple-user"] | null;
      assigner?: components["schemas"]["simple-user"] | null;
      review_requester?: components["schemas"]["simple-user"] | null;
      requested_reviewer?: components["schemas"]["simple-user"] | null;
      requested_team?: components["schemas"]["team"];
      dismissed_review?: components["schemas"]["issue-event-dismissed-review"];
      milestone?: components["schemas"]["issue-event-milestone"];
      project_card?: components["schemas"]["issue-event-project-card"];
      rename?: components["schemas"]["issue-event-rename"];
      author_association?: string;
      lock_reason?: string | null;
    };
    /**
     * Issue Event for Issue
     */
    "issue-event-for-issue": {
      id?: number;
      node_id?: string;
      url?: string;
      actor?: components["schemas"]["simple-user"];
      event?: string;
      commit_id?: string | null;
      commit_url?: string | null;
      created_at?: string;
      sha?: string;
      html_url?: string;
      message?: string;
      issue_url?: string;
      updated_at?: string;
      author_association?: string;
      body?: string;
      lock_reason?: string;
      submitted_at?: string;
      state?: string;
      pull_request_url?: string;
      body_html?: string;
      body_text?: string;
    };
    /**
     * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
     */
    label: {
      id: number;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
      /**
       * The name of the label.
       */
      name: string;
      description?: string | null;
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
    };
    /**
     * An SSH key granting access to a single repository.
     */
    "deploy-key": {
      id?: number;
      key?: string;
      url?: string;
      title?: string;
      verified?: boolean;
      created_at?: string;
      read_only?: boolean;
    };
    /**
     * Language
     */
    language: { [key: string]: number };
    /**
     * License Content
     */
    "license-content": {
      name: string;
      path: string;
      sha: string;
      size: number;
      url: string;
      html_url: string | null;
      git_url: string | null;
      download_url: string | null;
      type: string;
      content: string;
      encoding: string;
      _links: { git: string | null; html: string | null; self: string };
      license: components["schemas"]["license-simple"] | null;
    };
    "pages-source-hash": { branch: string; path: string };
    /**
     * The configuration for GitHub Pages for a repository.
     */
    page: {
      /**
       * The API address for accessing this Page resource.
       */
      url: string;
      /**
       * The status of the most recent build of the Page.
       */
      status: ("built" | "building" | "errored") | null;
      /**
       * The Pages site's custom domain
       */
      cname: string | null;
      /**
       * Whether the Page has a custom 404 page.
       */
      custom_404: boolean;
      /**
       * The web address the Page can be accessed from.
       */
      html_url?: string;
      source?: components["schemas"]["pages-source-hash"];
    };
    /**
     * Page Build
     */
    "page-build": {
      url: string;
      status: string;
      error: { message: string | null };
      pusher: components["schemas"]["simple-user"] | null;
      commit: string;
      duration: number;
      created_at: string;
      updated_at: string;
    };
    /**
     * Page Build Status
     */
    "page-build-status": { url: string; status: string };
    /**
     * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
     */
    "pull-request": {
      url: string;
      id: number;
      node_id: string;
      html_url: string;
      diff_url: string;
      patch_url: string;
      issue_url: string;
      commits_url: string;
      review_comments_url: string;
      review_comment_url: string;
      comments_url: string;
      statuses_url: string;
      /**
       * Number uniquely identifying the pull request within its repository.
       */
      number: number;
      /**
       * State of this Pull Request. Either `open` or `closed`.
       */
      state: "open" | "closed";
      locked: boolean;
      /**
       * The title of the pull request.
       */
      title: string;
      user: components["schemas"]["simple-user"] | null;
      body: string | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string;
        default?: boolean;
      }[];
      milestone: components["schemas"]["milestone"] | null;
      active_lock_reason?: string | null;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      merged_at: string | null;
      merge_commit_sha: string | null;
      assignee: components["schemas"]["simple-user"] | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      requested_reviewers?: components["schemas"]["simple-user"][] | null;
      requested_teams?: components["schemas"]["team-simple"][] | null;
      head: {
        label: string;
        ref: string;
        repo: {
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          deployments_url: string;
          description: string | null;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          hooks_url: string;
          html_url: string;
          id: number;
          node_id: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          languages_url: string;
          merges_url: string;
          milestones_url: string;
          name: string;
          notifications_url: string;
          owner: {
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string | null;
            html_url: string;
            id: number;
            node_id: string;
            login: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          };
          private: boolean;
          pulls_url: string;
          releases_url: string;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          tags_url: string;
          teams_url: string;
          trees_url: string;
          url: string;
          clone_url: string;
          default_branch: string;
          forks: number;
          forks_count: number;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          homepage: string | null;
          language: string | null;
          master_branch?: string;
          archived: boolean;
          disabled: boolean;
          mirror_url: string | null;
          open_issues: number;
          open_issues_count: number;
          permissions?: { admin: boolean; pull: boolean; push: boolean };
          temp_clone_token?: string;
          allow_merge_commit?: boolean;
          allow_squash_merge?: boolean;
          allow_rebase_merge?: boolean;
          license: {
            key: string;
            name: string;
            url: string | null;
            spdx_id: string | null;
            node_id: string;
          } | null;
          pushed_at: string;
          size: number;
          ssh_url: string;
          stargazers_count: number;
          svn_url: string;
          topics?: string[];
          watchers: number;
          watchers_count: number;
          created_at: string;
          updated_at: string;
        };
        sha: string;
        user: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string | null;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
      };
      base: {
        label: string;
        ref: string;
        repo: {
          archive_url: string;
          assignees_url: string;
          blobs_url: string;
          branches_url: string;
          collaborators_url: string;
          comments_url: string;
          commits_url: string;
          compare_url: string;
          contents_url: string;
          contributors_url: string;
          deployments_url: string;
          description: string | null;
          downloads_url: string;
          events_url: string;
          fork: boolean;
          forks_url: string;
          full_name: string;
          git_commits_url: string;
          git_refs_url: string;
          git_tags_url: string;
          hooks_url: string;
          html_url: string;
          id: number;
          node_id: string;
          issue_comment_url: string;
          issue_events_url: string;
          issues_url: string;
          keys_url: string;
          labels_url: string;
          languages_url: string;
          merges_url: string;
          milestones_url: string;
          name: string;
          notifications_url: string;
          owner: {
            avatar_url: string;
            events_url: string;
            followers_url: string;
            following_url: string;
            gists_url: string;
            gravatar_id: string | null;
            html_url: string;
            id: number;
            node_id: string;
            login: string;
            organizations_url: string;
            received_events_url: string;
            repos_url: string;
            site_admin: boolean;
            starred_url: string;
            subscriptions_url: string;
            type: string;
            url: string;
          };
          private: boolean;
          pulls_url: string;
          releases_url: string;
          stargazers_url: string;
          statuses_url: string;
          subscribers_url: string;
          subscription_url: string;
          tags_url: string;
          teams_url: string;
          trees_url: string;
          url: string;
          clone_url: string;
          default_branch: string;
          forks: number;
          forks_count: number;
          git_url: string;
          has_downloads: boolean;
          has_issues: boolean;
          has_projects: boolean;
          has_wiki: boolean;
          has_pages: boolean;
          homepage: string | null;
          language: string | null;
          master_branch?: string;
          archived: boolean;
          disabled: boolean;
          mirror_url: string | null;
          open_issues: number;
          open_issues_count: number;
          permissions?: { admin: boolean; pull: boolean; push: boolean };
          temp_clone_token?: string;
          allow_merge_commit?: boolean;
          allow_squash_merge?: boolean;
          allow_rebase_merge?: boolean;
          license: components["schemas"]["license-simple"] | null;
          pushed_at: string;
          size: number;
          ssh_url: string;
          stargazers_count: number;
          svn_url: string;
          topics?: string[];
          watchers: number;
          watchers_count: number;
          created_at: string;
          updated_at: string;
        };
        sha: string;
        user: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string | null;
          html_url: string;
          id: number;
          node_id: string;
          login: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
      };
      _links: {
        comments: components["schemas"]["link"];
        commits: components["schemas"]["link"];
        statuses: components["schemas"]["link"];
        html: components["schemas"]["link"];
        issue: components["schemas"]["link"];
        review_comments: components["schemas"]["link"];
        review_comment: components["schemas"]["link"];
        self: components["schemas"]["link"];
      };
      author_association: string;
      /**
       * Indicates whether or not the pull request is a draft.
       */
      draft?: boolean;
      merged: boolean;
      mergeable: boolean | null;
      rebaseable?: boolean | null;
      mergeable_state: string;
      merged_by: components["schemas"]["simple-user"] | null;
      comments: number;
      review_comments: number;
      /**
       * Indicates whether maintainers can modify the pull request.
       */
      maintainer_can_modify: boolean;
      commits: number;
      additions: number;
      deletions: number;
      changed_files: number;
    };
    /**
     * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
     */
    "pull-request-review-comment": {
      /**
       * URL for the pull request review comment
       */
      url: string;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      user: components["schemas"]["simple-user"];
      /**
       * The text of the comment.
       */
      body: string;
      created_at: string;
      updated_at: string;
      /**
       * HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      /**
       * How the author of the comment is associated with the pull request.
       */
      author_association: string;
      _links: {
        self: { href: string };
        html: { href: string };
        pull_request: { href: string };
      };
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line?: number | null;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line?: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      start_side?: ("LEFT" | "RIGHT") | null;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line?: number;
      /**
       * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
       */
      side?: "LEFT" | "RIGHT";
      reactions?: components["schemas"]["reaction-rollup"];
      body_html?: string;
      body_text?: string;
    };
    /**
     * Pull Request Merge Result
     */
    "pull-request-merge-result": {
      sha: string;
      merged: boolean;
      message: string;
    };
    /**
     * Pull Request Review Request
     */
    "pull-request-review-request": {
      users?: {
        login?: string;
        id?: number;
        node_id?: string;
        avatar_url?: string;
        gravatar_id?: string;
        url?: string;
        html_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        starred_url?: string;
        subscriptions_url?: string;
        organizations_url?: string;
        repos_url?: string;
        events_url?: string;
        received_events_url?: string;
        type?: string;
        site_admin?: boolean;
      }[];
      teams?: {
        id?: number;
        node_id?: string;
        url?: string;
        html_url?: string;
        name?: string;
        slug?: string;
        description?: string | null;
        privacy?: string;
        permission?: string;
        members_url?: string;
        repositories_url?: string;
        parent?: string | null;
      }[];
    };
    /**
     * Pull Request Reviews are reviews on pull requests.
     */
    "pull-request-review": {
      /**
       * Unique identifier of the review
       */
      id: number;
      node_id: string;
      user: components["schemas"]["simple-user"] | null;
      /**
       * The text of the review.
       */
      body: string;
      state: string;
      html_url: string;
      pull_request_url: string;
      _links: { html: { href: string }; pull_request: { href: string } };
      submitted_at?: string;
      /**
       * A commit SHA for the review.
       */
      commit_id: string;
      body_html?: string;
      body_text?: string;
      author_association: string;
    };
    /**
     * Legacy Review Comment
     */
    "review-comment": {
      url: string;
      pull_request_review_id: number | null;
      id: number;
      node_id: string;
      diff_hunk: string;
      path: string;
      position: number | null;
      original_position: number;
      commit_id: string;
      original_commit_id: string;
      in_reply_to_id?: number;
      user: components["schemas"]["simple-user"] | null;
      body: string;
      created_at: string;
      updated_at: string;
      html_url: string;
      pull_request_url: string;
      author_association: string;
      _links: {
        self: components["schemas"]["link"];
        html: components["schemas"]["link"];
        pull_request: components["schemas"]["link"];
      };
      body_text?: string;
      body_html?: string;
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side?: "LEFT" | "RIGHT";
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      start_side?: ("LEFT" | "RIGHT") | null;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line?: number;
      /**
       * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line?: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line?: number | null;
      /**
       * The original first line of the range for a multi-line comment.
       */
      original_start_line?: number | null;
    };
    /**
     * Data related to a release.
     */
    "release-asset": {
      url: string;
      browser_download_url: string;
      id: number;
      node_id: string;
      /**
       * The file name of the asset.
       */
      name: string;
      label: string | null;
      /**
       * State of the release asset.
       */
      state: "uploaded";
      content_type: string;
      size: number;
      download_count: number;
      created_at: string;
      updated_at: string;
      uploader: components["schemas"]["simple-user"] | null;
    };
    /**
     * A release.
     */
    release: {
      url: string;
      html_url: string;
      assets_url: string;
      upload_url: string;
      tarball_url: string | null;
      zipball_url: string | null;
      id: number;
      node_id: string;
      /**
       * The name of the tag.
       */
      tag_name: string;
      /**
       * Specifies the commitish value that determines where the Git tag is created from.
       */
      target_commitish: string;
      name: string | null;
      body?: string | null;
      /**
       * true to create a draft (unpublished) release, false to create a published one.
       */
      draft: boolean;
      /**
       * Whether to identify the release as a prerelease or a full release.
       */
      prerelease: boolean;
      created_at: string;
      published_at: string | null;
      author: components["schemas"]["simple-user"];
      assets: components["schemas"]["release-asset"][];
      body_html?: string;
      body_text?: string;
    };
    /**
     * Stargazer
     */
    stargazer: {
      starred_at: string;
      user: components["schemas"]["simple-user"] | null;
    };
    /**
     * Code Frequency Stat
     */
    "code-frequency-stat": number[];
    /**
     * Commit Activity
     */
    "commit-activity": { days: number[]; total: number; week: number };
    /**
     * Contributor Activity
     */
    "contributor-activity": {
      author: components["schemas"]["simple-user"] | null;
      total: number;
      weeks: { w?: string; a?: number; d?: number; c?: number }[];
    };
    "participation-stats": { all?: number[]; owner?: number[] };
    /**
     * Repository invitations let you manage who you collaborate with.
     */
    "repository-subscription": {
      /**
       * Determines if notifications should be received from this repository.
       */
      subscribed: boolean;
      /**
       * Determines if all notifications should be blocked from this repository.
       */
      ignored: boolean;
      reason: string | null;
      created_at: string;
      url: string;
      repository_url: string;
    };
    /**
     * Tag
     */
    tag: {
      name: string;
      commit: { sha: string; url: string };
      zipball_url: string;
      tarball_url: string;
      node_id: string;
    };
    /**
     * A topic aggregates entities that are related to a subject.
     */
    topic: { names?: string[] };
    traffic: { timestamp: string; uniques: number; count: number };
    /**
     * Clone Traffic
     */
    "clone-traffic": {
      count: number;
      uniques: number;
      clones: components["schemas"]["traffic"][];
    };
    /**
     * Content Traffic
     */
    "content-traffic": {
      path: string;
      title: string;
      count: number;
      uniques: number;
    };
    /**
     * Referrer Traffic
     */
    "referrer-traffic": { referrer: string; count: number; uniques: number };
    /**
     * View Traffic
     */
    "view-traffic": {
      count: number;
      uniques: number;
      views: components["schemas"]["traffic"][];
    };
    "scim-group-list-enterprise": {
      schemas?: string[];
      totalResults?: number;
      itemsPerPage?: number;
      startIndex?: number;
      Resources?: {
        schemas?: string[];
        id?: string;
        externalId?: string | null;
        displayName?: string;
        members?: { value?: string; $ref?: string; display?: string }[];
        meta?: {
          resourceType?: string;
          created?: string;
          lastModified?: string;
          location?: string;
        };
      }[];
    };
    "scim-enterprise-group": {
      schemas?: string[];
      id?: string;
      externalId?: string | null;
      displayName?: string;
      members?: { value?: string; $ref?: string; display?: string }[];
      meta?: {
        resourceType?: string;
        created?: string;
        lastModified?: string;
        location?: string;
      };
    };
    "scim-user-list-enterprise": {
      schemas?: string[];
      totalResults?: number;
      itemsPerPage?: number;
      startIndex?: number;
      Resources?: {
        schemas?: string[];
        id?: string;
        externalId?: string;
        userName?: string;
        name?: { givenName?: string; familyName?: string };
        emails?: { value?: string; primary?: boolean; type?: string }[];
        groups?: { value?: string }[];
        active?: boolean;
        meta?: {
          resourceType?: string;
          created?: string;
          lastModified?: string;
          location?: string;
        };
      }[];
    };
    "scim-enterprise-user": {
      schemas?: string[];
      id?: string;
      externalId?: string;
      userName?: string;
      name?: { givenName?: string; familyName?: string };
      emails?: { value?: string; type?: string; primary?: boolean }[];
      groups?: { value?: string }[];
      active?: boolean;
      meta?: {
        resourceType?: string;
        created?: string;
        lastModified?: string;
        location?: string;
      };
    };
    /**
     * SCIM /Users provisioning endpoints
     */
    "scim-user": {
      /**
       * SCIM schema used.
       */
      schemas: string[];
      /**
       * Unique identifier of an external identity
       */
      id: string;
      /**
       * The ID of the User.
       */
      externalId: string | null;
      /**
       * Configured by the admin. Could be an email, login, or username
       */
      userName: string | null;
      /**
       * The name of the user, suitable for display to end-users
       */
      displayName?: string | null;
      name: {
        givenName: string | null;
        familyName: string | null;
        formatted?: string | null;
      };
      /**
       * user emails
       */
      emails: { value: string; primary?: boolean }[];
      /**
       * The active status of the User.
       */
      active: boolean;
      meta: {
        resourceType?: string;
        created?: string;
        lastModified?: string;
        location?: string;
      };
      /**
       * The ID of the organization.
       */
      organization_id?: number;
      /**
       * Set of operations to be performed
       */
      operations?: {
        op: "add" | "remove" | "replace";
        path?: string;
        value?: string | { [key: string]: any } | { [key: string]: any }[];
      }[];
      /**
       * associated groups
       */
      groups?: { value?: string; display?: string }[];
    };
    /**
     * SCIM User List
     */
    "scim-user-list": {
      /**
       * SCIM schema used.
       */
      schemas: string[];
      totalResults: number;
      itemsPerPage: number;
      startIndex: number;
      Resources: components["schemas"]["scim-user"][];
    };
    "search-result-text-matches": {
      object_url?: string;
      object_type?: string | null;
      property?: string;
      fragment?: string;
      matches?: { text?: string; indices?: number[] }[];
    }[];
    /**
     * Code Search Result Item
     */
    "code-search-result-item": {
      name: string;
      path: string;
      sha: string;
      url: string;
      git_url: string;
      html_url: string;
      repository: components["schemas"]["minimal-repository"];
      score: number;
      file_size?: number;
      language?: string | null;
      last_modified_at?: string;
      line_numbers?: string[];
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Commit Search Result Item
     */
    "commit-search-result-item": {
      url: string;
      sha: string;
      html_url: string;
      comments_url: string;
      commit: {
        author: { name: string; email: string; date: string };
        committer: components["schemas"]["git-user"] | null;
        comment_count: number;
        message: string;
        tree: { sha: string; url: string };
        url: string;
        verification?: components["schemas"]["verification"];
      };
      author: components["schemas"]["simple-user"] | null;
      committer: components["schemas"]["git-user"] | null;
      parents: { url?: string; html_url?: string; sha?: string }[];
      repository: components["schemas"]["minimal-repository"];
      score: number;
      node_id: string;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Issue Search Result Item
     */
    "issue-search-result-item": {
      url: string;
      repository_url: string;
      labels_url: string;
      comments_url: string;
      events_url: string;
      html_url: string;
      id: number;
      node_id: string;
      number: number;
      title: string;
      locked: boolean;
      active_lock_reason?: string | null;
      assignees?: components["schemas"]["simple-user"][] | null;
      user: components["schemas"]["simple-user"] | null;
      labels: {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        color?: string;
        default?: boolean;
        description?: string | null;
      }[];
      state: string;
      assignee: components["schemas"]["simple-user"] | null;
      milestone: components["schemas"]["milestone"] | null;
      comments: number;
      created_at: string;
      updated_at: string;
      closed_at: string | null;
      text_matches?: components["schemas"]["search-result-text-matches"];
      pull_request?: {
        merged_at?: string | null;
        diff_url: string | null;
        html_url: string | null;
        patch_url: string | null;
        url: string | null;
      };
      body?: string;
      score: number;
      author_association: string;
      draft?: boolean;
      repository?: components["schemas"]["repository"];
      body_html?: string;
      body_text?: string;
      timeline_url?: string;
      performed_via_github_app?: components["schemas"]["integration"] | null;
    };
    /**
     * Label Search Result Item
     */
    "label-search-result-item": {
      id: number;
      node_id: string;
      url: string;
      name: string;
      color: string;
      default: boolean;
      description: string | null;
      score: number;
      text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /**
     * Repo Search Result Item
     */
    "repo-search-result-item": {
      id: number;
      node_id: string;
      name: string;
      full_name: string;
      owner: components["schemas"]["simple-user"] | null;
      private: boolean;
      html_url: string;
      description: string | null;
      fork: boolean;
      url: string;
      created_at: string;
      updated_at: string;
      pushed_at: string;
      homepage: string | null;
      size: number;
      stargazers_count: number;
      watchers_count: number;
      language: string | null;
      forks_count: number;
      open_issues_count: number;
      master_branch?: string;
      default_branch: string;
      score: number;
      forks_url: string;
      keys_url: string;
      collaborators_url: string;
      teams_url: string;
      hooks_url: string;
      issue_events_url: string;
      events_url: string;
      assignees_url: string;
      branches_url: string;
      tags_url: string;
      blobs_url: string;
      git_tags_url: string;
      git_refs_url: string;
      trees_url: string;
      statuses_url: string;
      languages_url: string;
      stargazers_url: string;
      contributors_url: string;
      subscribers_url: string;
      subscription_url: string;
      commits_url: string;
      git_commits_url: string;
      comments_url: string;
      issue_comment_url: string;
      contents_url: string;
      compare_url: string;
      merges_url: string;
      archive_url: string;
      downloads_url: string;
      issues_url: string;
      pulls_url: string;
      milestones_url: string;
      notifications_url: string;
      labels_url: string;
      releases_url: string;
      deployments_url: string;
      git_url: string;
      ssh_url: string;
      clone_url: string;
      svn_url: string;
      forks: number;
      open_issues: number;
      watchers: number;
      topics?: string[];
      mirror_url: string | null;
      has_issues: boolean;
      has_projects: boolean;
      has_pages: boolean;
      has_wiki: boolean;
      has_downloads: boolean;
      archived: boolean;
      /**
       * Returns whether or not this repository disabled.
       */
      disabled: boolean;
      license: components["schemas"]["license-simple"] | null;
      permissions?: { admin: boolean; pull: boolean; push: boolean };
      text_matches?: components["schemas"]["search-result-text-matches"];
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      delete_branch_on_merge?: boolean;
    };
    /**
     * Topic Search Result Item
     */
    "topic-search-result-item": {
      name: string;
      display_name: string | null;
      short_description: string | null;
      description: string | null;
      created_by: string | null;
      released: string | null;
      created_at: string;
      updated_at: string;
      featured: boolean;
      curated: boolean;
      score: number;
      repository_count?: number | null;
      logo_url?: string | null;
      text_matches?: components["schemas"]["search-result-text-matches"];
      related?:
        | {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[]
        | null;
      aliases?:
        | {
            topic_relation?: {
              id?: number;
              name?: string;
              topic_id?: number;
              relation_type?: string;
            };
          }[]
        | null;
    };
    /**
     * User Search Result Item
     */
    "user-search-result-item": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      received_events_url: string;
      type: string;
      score: number;
      following_url: string;
      gists_url: string;
      starred_url: string;
      events_url: string;
      public_repos?: number;
      public_gists?: number;
      followers?: number;
      following?: number;
      created_at?: string;
      updated_at?: string;
      name?: string | null;
      bio?: string | null;
      email?: string | null;
      location?: string | null;
      site_admin: boolean;
      hireable?: boolean | null;
      text_matches?: components["schemas"]["search-result-text-matches"];
      blog?: string | null;
      company?: string | null;
      suspended_at?: string | null;
    };
    /**
     * Private User
     */
    "private-user": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: string | null;
      company: string | null;
      blog: string | null;
      location: string | null;
      email: string | null;
      hireable: boolean | null;
      bio: string | null;
      twitter_username?: string | null;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      created_at: string;
      updated_at: string;
      private_gists: number;
      total_private_repos: number;
      owned_private_repos: number;
      disk_usage: number;
      collaborators: number;
      two_factor_authentication: boolean;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      suspended_at?: string | null;
      business_plus?: boolean;
      ldap_dn?: string;
    };
    /**
     * Public User
     */
    "public-user": {
      login: string;
      id: number;
      node_id: string;
      avatar_url: string;
      gravatar_id: string | null;
      url: string;
      html_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      starred_url: string;
      subscriptions_url: string;
      organizations_url: string;
      repos_url: string;
      events_url: string;
      received_events_url: string;
      type: string;
      site_admin: boolean;
      name: string | null;
      company: string | null;
      blog: string | null;
      location: string | null;
      email: string | null;
      hireable: boolean | null;
      bio: string | null;
      twitter_username?: string | null;
      public_repos: number;
      public_gists: number;
      followers: number;
      following: number;
      created_at: string;
      updated_at: string;
      plan?: {
        collaborators: number;
        name: string;
        space: number;
        private_repos: number;
      };
      suspended_at?: string | null;
      private_gists?: number;
      total_private_repos?: number;
      owned_private_repos?: number;
      disk_usage?: number;
      collaborators?: number;
    };
    /**
     * Email
     */
    email:
      | {
          email: string;
          primary: boolean;
          verified: boolean;
          visibility: string | null;
        }
      | string;
    /**
     * A unique encryption key
     */
    "gpg-key": {
      id: number;
      primary_key_id: number | null;
      key_id: string;
      public_key: string;
      emails: { email?: string; verified?: boolean }[];
      subkeys: {
        id?: number;
        primary_key_id?: number;
        key_id?: string;
        public_key?: string;
        emails?: { [key: string]: any }[];
        subkeys?: { [key: string]: any }[];
        can_sign?: boolean;
        can_encrypt_comms?: boolean;
        can_encrypt_storage?: boolean;
        can_certify?: boolean;
        created_at?: string;
        expires_at?: string | null;
        raw_key?: string | null;
      }[];
      can_sign: boolean;
      can_encrypt_comms: boolean;
      can_encrypt_storage: boolean;
      can_certify: boolean;
      created_at: string;
      expires_at: string | null;
      raw_key: string | null;
    };
    /**
     * Key
     */
    key: {
      key_id?: string;
      key?: string;
      id?: number;
      url?: string;
      title?: string;
      created_at?: string;
      verified?: boolean;
      read_only?: boolean;
    };
    "marketplace-account": {
      url: string;
      id: number;
      type: string;
      node_id?: string;
      login: string;
      email?: string | null;
      organization_billing_email?: string | null;
    };
    /**
     * User Marketplace Purchase
     */
    "user-marketplace-purchase": {
      billing_cycle: string;
      next_billing_date: string | null;
      unit_count: number | null;
      on_free_trial: boolean;
      free_trial_ends_on: string | null;
      updated_at: string | null;
      account: components["schemas"]["marketplace-account"];
      plan: components["schemas"]["marketplace-listing-plan"];
    };
    /**
     * Starred Repository
     */
    "starred-repository": {
      starred_at: string;
      repo: components["schemas"]["repository"];
    };
    /**
     * Hovercard
     */
    hovercard: { contexts: { message: string; octicon: string }[] };
    /**
     * Key Simple
     */
    "key-simple": { id: number; key: string };
  };
  responses: {
    /**
     * Resource Not Found
     */
    not_found: { [key: string]: any };
    /**
     * Validation Failed
     */
    validation_failed_simple: { [key: string]: any };
    /**
     * Preview Header Missing
     */
    preview_header_missing: { [key: string]: any };
    /**
     * Forbidden
     */
    forbidden: { [key: string]: any };
    /**
     * Requires Authentication
     */
    requires_authentication: { [key: string]: any };
    /**
     * Validation Failed
     */
    validation_failed: { [key: string]: any };
    /**
     * Not Modified
     */
    not_modified: { [key: string]: any };
    /**
     * Gone
     */
    gone: { [key: string]: any };
    /**
     * Service Unavailable
     */
    service_unavailable: { [key: string]: any };
    /**
     * Forbidden Gist
     */
    forbidden_gist: { [key: string]: any };
    /**
     * Moved Permanently
     */
    moved_permanently: { [key: string]: any };
    /**
     * Conflict
     */
    conflict: { [key: string]: any };
    /**
     * Internal Error
     */
    internal_error: { [key: string]: any };
    /**
     * Bad Request
     */
    bad_request: { [key: string]: any };
    /**
     * Found
     */
    found: { [key: string]: any };
    /**
     * Resource Not Found
     */
    scim_not_found: { [key: string]: any };
    /**
     * Forbidden
     */
    scim_forbidden: { [key: string]: any };
    /**
     * Bad Request
     */
    scim_bad_request: { [key: string]: any };
    /**
     * Internal Error
     */
    scim_internal_error: { [key: string]: any };
    /**
     * Conflict
     */
    scim_conflict: { [key: string]: any };
  };
}
